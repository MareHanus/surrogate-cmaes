%% EC 2017 journal plots
% Script for making graphs showing the dependence of minimal function
% values on the number of function values of compared algorithms.
% 
% Created for the journal article for EC (2017).

%% load data

% checkout file containing all loaded data
tmpFName = fullfile('/tmp', 'ec2017comparison.mat');
if (exist(tmpFName', 'file'))
  load(tmpFName);
else
  
% needed function and dimension settings
funcSet.BBfunc = 1:24;
funcSet.dims = [2, 3, 5, 10, 20];
maxEvals = 250;
  
% folder for results
actualFolder = pwd;
articleFolder = fullfile(actualFolder(1:end - 1 - length('surrogate-cmaes')), 'latex_scmaes', 'ec2016paper');
plotResultsFolder = fullfile(articleFolder, 'img');
tableFolder = fullfile(articleFolder, 'data');
[~,~] = mkdir(plotResultsFolder);
[~,~] = mkdir(tableFolder);

% path settings
exppath = fullfile('exp', 'experiments');

scmaes_path = fullfile(exppath, 'S-CMA-ES_GP5');
% TODO: change to exp_doubleEC_26_1model
dts005_path = fullfile(exppath, 'exp_doubleEC_26');
% TODO: change to exp_doubleEC_26_1model_adapt04
dts_adapt_path = fullfile(exppath, 'exp_doubleEC_26_adapt04');
maes_path = fullfile(exppath, 'MAES-MMP');
gpop_path = fullfile(exppath, 'GPOP');

cmaes_path = fullfile(exppath, 'CMA-ES');
cmaes2pop_path = fullfile(exppath, 'CMA-ES_2pop');
saacmes_path = fullfile(exppath, 'BIPOP-saACM-k');
lmm_path = fullfile(exppath, 'lmm-CMA-ES');
bobyqa_path = fullfile(exppath, 'BOBYQA');
smac_path = fullfile(exppath, 'SMAC');
fmincon_path = fullfile(exppath, 'fmincon');

% load data
dataFolders = {scmaes_path; ...
               dts005_path; ...
               dts_adapt_path; ...
               maes_path; ...
               gpop_path; ...
               cmaes_path; ...
               cmaes2pop_path; ...
               saacmes_path; ...
               lmm_path; ...
               bobyqa_path; ...
               smac_path; ...
               fmincon_path ...
               };
             
[evals, settings] = catEvalSet(dataFolders, funcSet);

% find ids in settings
clear findSet
findSet.modelType = 'gp';
findSet.evoControlModelGenerations = 5;
scmaes_gp_Id = getStructIndex(settings, findSet);

clear findSet
findSet.evoControl = 'doubletrained';
findSet.DTAdaptive_updateRateDown = 'obj.updateRate';
dts_adapt_Id = getStructIndex(settings, findSet);

clear findSet
findSet.algName = 'MAES-MMP';
maes_Id = getStructIndex(settings, findSet);
findSet.algName = 'GPOP';
gpop_Id = getStructIndex(settings, findSet);
findSet.algName = 'CMA-ES';
cmaes_Id = getStructIndex(settings, findSet);
findSet.algName = 'CMA-ES_2pop';
cmaes2pop_Id = getStructIndex(settings, findSet);
findSet.algName = 'BIPOP-saACM-k';
saacmes_Id = getStructIndex(settings, findSet);
findSet.algName = 'lmm-CMA-ES';
lmm_Id = getStructIndex(settings, findSet);
findSet.algName = 'BOBYQA';
bobyqa_Id = getStructIndex(settings, findSet);
findSet.algName = 'SMAC';
smac_Id = getStructIndex(settings, findSet);
findSet.algName = 'S-CMA-ES_GP5';
scmaes_gp_Id = getStructIndex(settings, findSet);
findSet.algName = 'fmincon';
fmincon_Id = getStructIndex(settings, findSet);

all_Ids = [scmaes_gp_Id, dts_adapt_Id, maes_Id, gpop_Id, cmaes_Id, ...
    cmaes2pop_Id, saacmes_Id, lmm_Id, bobyqa_Id, smac_Id, fmincon_Id];
dts005_Id = setdiff(1:length(settings), all_Ids);

% extract data
scmaes_gp_data = evals(:, :, scmaes_gp_Id);
dts005_data    = evals(:, :, dts005_Id);
dts_adapt_data = evals(:, :, dts_adapt_Id);
maes_data      = evals(:, :, maes_Id);
gpop_data      = evals(:, :, gpop_Id);
cmaes_data     = evals(:, :, cmaes_Id);
cmaes2pop_data = evals(:, :, cmaes2pop_Id);
saacmes_data   = evals(:, :, saacmes_Id);
lmm_data       = evals(:, :, lmm_Id);
bobyqa_data    = evals(:, :, bobyqa_Id);
smac_data      = evals(:, :, smac_Id);
fmincon_data   = evals(:, :, fmincon_Id);

% color settings
scmaes_gpCol = getAlgColors(5); % dark red
dts005Col    = getAlgColors(6); % light red  % getAlgColors('dtscmaes');
dts_adaptCol = getAlgColors(23); % middle yellow
maesCol      = getAlgColors(4); % alien green
gpopCol      = getAlgColors(20); % middle blue
cmaesCol     = getAlgColors('cmaes'); % dark blue
cmaes2popCol = getAlgColors(14); % black
saacmesCol   = getAlgColors('saacmes'); % light blue
lmmCol       = getAlgColors(22); % darker green % getAlgColors('lmmcmaes');
bobyqaCol    = getAlgColors(2); % azure
smacCol      = getAlgColors('smac');
fminconCol   = getAlgColors(15); % pink

if (~exist(tmpFName, 'file'))
  save(tmpFName);
end

end


%% GP-based algorithm comparison
% Scaled function values of f1-f24 in dimensions 5, 10 and 20.

for plotDims = [5, 10, 20]
  %%
  data = {...
          scmaes_gp_data, ...
          dts005_data, ...
          dts_adapt_data, ...
          maes_data, ...
          gpop_data, ...
          };

  datanames = {...
      'S-CMA-ES', ...
      '0.05/2pop DTS-CMA-ES', ...
      'adaptive DTS-CMA-ES', ...
      'MA-ES', ...
      'GPOP', ...
      };

  colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol]/255;

  plotFuns = 1:24;
  % plotDims = [5, 10, 20];

  clear pdfNames
  pdfNames = {};
  for f = plotFuns
    for d = plotDims
      pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('gpalgs_f%d_%dD', f, d));
    end
  end

  close all
  han = relativeFValuesPlot(data, ...
                                'DataNames', datanames, 'DataDims', funcSet.dims, ...
                                'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                                'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                                'AggregateDims', false, 'OneFigure', false, ...
                                'Statistic', @median, 'AggregateFuns', false, ...
                                'LineSpecification', {'-', '-', '-', '-', '-', '-', '-'}, ...
                                'LegendOption', 'split', 'MaxEval', maxEvals, ...
                                'FunctionNames', true);

  print2pdf(han, pdfNames, 1)
end


%% Algorithm comparison: CMA-ES, MA-ES, lmm-CMA-ES, saACMES, S-CMA-ES, DTS-CMA-ES  
% Scaled function values of f1-f24 in dimensions 5, 10 and 20.

for plotDims = [5, 10, 20]
  %%
  data = {...
          scmaes_gp_data, ...
          dts005_data, ...
          dts_adapt_data, ...
          maes_data, ...
          gpop_data, ...
          cmaes_data, ...
          cmaes2pop_data, ...
          saacmes_data, ...
          lmm_data, ...
          bobyqa_data, ...
          smac_data, ...
          fmincon_data ...
          };

  datanames = {...
      'S-CMA-ES', ...
      '0.05/2pop DTS-CMA-ES', ...
      'adaptive DTS-CMA-ES', ...
      'MA-ES', ...
      'GPOP', ...
      'CMA-ES', ...
      'CMA-ES 2pop', ...
      'BIPOP-{}^{s*}ACMES-k', ...
      'lmm-CMA-ES', ...
      'BOBYQA', ...
      'SMAC', ...
      'fmincon' ...
      };

  colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol; ...
      cmaesCol; cmaes2popCol; saacmesCol; lmmCol; bobyqaCol; smacCol; fminconCol]/255;

  plotFuns = 1:24;
  % plotDims = [5, 10, 20];

  clear pdfNames
  pdfNames = {};
  for f = plotFuns
    for d = plotDims
      pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('all_f%d_%dD', f, d));
    end
  end

  close all
  han = relativeFValuesPlot(data, ...
                                'DataNames', datanames, 'DataDims', funcSet.dims, ...
                                'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                                'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                                'AggregateDims', false, 'OneFigure', false, ...
                                'Statistic', @median, 'AggregateFuns', false, ...
                                'LineSpecification', {'-', '-', '-', '-', '-', '-', '-'}, ...
                                'LegendOption', 'split', 'MaxEval', maxEvals, ...
                                'FunctionNames', true);

  print2pdf(han, pdfNames, 1)
end

%% Aggregated algorithm comparison: CMA-ES, MA-ES, lmm-CMA-ES, saACMES, S-CMA-ES, DTS-CMA-ES  
% Aggregated  scaled function values in dimensions 5, 10 and 20.

plotDims = [2, 5, 10, 20];

data = {...
        scmaes_gp_data, ...
        dts005_data, ...
        dts_adapt_data, ...
        maes_data, ...
        gpop_data, ...
        cmaes_data, ...
        cmaes2pop_data, ...
        saacmes_data, ...
        lmm_data, ...
        bobyqa_data, ...
        smac_data, ...
        fmincon_data ...
        };

datanames = {...
    'S-CMA-ES', ...
    '0.05/2pop DTS-CMA-ES', ...
    'adaptive DTS-CMA-ES', ...
    'MA-ES', ...
    'GPOP', ...
    'CMA-ES', ...
    'CMA-ES 2pop', ...
    'BIPOP-{}^{s*}ACMES-k', ...
    'lmm-CMA-ES', ...
    'BOBYQA', ...
    'SMAC', ...
    'fmincon' ...
    };

colors = [scmaes_gpCol; dts005Col; dts_adaptCol; maesCol; gpopCol; ...
    cmaesCol; cmaes2popCol; saacmesCol; lmmCol; bobyqaCol; smacCol; fminconCol]/255;

plotFuns = 1:24;

clear pdfNames
pdfNames = {};
for d = plotDims
  pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('all_agg_%dD', d));
end

close all
han = relativeFValuesPlot(data, ...
                              'DataNames', datanames, 'DataDims', funcSet.dims, ...
                              'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                              'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                              'AggregateDims', false, 'OneFigure', false, ...
                              'Statistic', @median, 'AggregateFuns', true, ...
                              'LineSpecification', {'-', '-', '-', '-', '-', '-', '-'}, ...
                              'LegendOption', 'split', 'MaxEval', maxEvals, ...
                              'FunctionNames', true);

                              
                            
print2pdf(han, pdfNames, 1)
                         
%% final clearing
close all
